(()=>{"use strict";var e,t=function(){function e(){}return e.strToMethod=function(e,t){void 0===t&&(t="");for(var r=e.match(/[a-zA-Z]+/g),n=0;n<r.length;n++)r[n]=this.ucfirst(r[n]);return r.join(t)},e.ucfirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},e.replaceKeyValueRegex=function(e,t){for(var r in e){var n=new RegExp(r,"g");t=t.replace(n,e[r])}return t},e.generateControllerName=function(e,t){return e.indexOf(".")&&(e=e.replace(".","_")),(e=t?t+"_"+e:e)+"Controller"},e.getRawWidgetTemp=function(e,t){var r=new RegExp("{"+e+"}([\\s\\S]*?){/"+e+"}","g").exec(t);return r?{outter:r[0],inner:r[1]}:null},e}(),r=function(){function e(){}return e.prototype.getRawTemp=function(e){var r=this.getRawTempKey();return t.getRawWidgetTemp(r,e)},e.prototype.generateControllerName=function(e){var t=e.name;return(t=e.groupName?e.groupName+"_"+t:t)+"Controller"},e.prototype.generateWidgetName=function(e){var r=e.name;return r=e.groupName?e.groupName+"_"+r:r,"gen"+t.strToMethod(r)+"Widget"},e}(),n=(e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)},function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}),a=function(e){function r(t,r){var n=e.call(this)||this;return n.parameter=t,n.dartTemp=r,n}return n(r,e),r.prototype.generate=function(){var e=this.getRawTemp(this.dartTemp),r=(e.outter,e.inner),n={"{formElControllerName}":this.generateControllerName(this.parameter),"{formElWidgetName}":this.generateWidgetName(this.parameter),"{formElCaption}":this.parameter.description?this.parameter.description:this.parameter.name};return r=t.replaceKeyValueRegex(n,r),r=this.parseValidator(r),this.parseNumberOnly(r)},r.prototype.parseValidator=function(e){var t=/{formElValidator}([\s\S]*?){\/formElValidator}/g.exec(e),r=t[1],n=t[0];return this.parameter.required?e.replace(n,r):e.replace(n,"")},r.prototype.parseNumberOnly=function(e){var r=t.getRawWidgetTemp("formElNumberOnly",e),n=r.outter,a=r.inner;return"integer"==this.parameter.dataType?e.replace(n,a):e.replace(n,"")},r.prototype.getRawTempKey=function(){return r.widgetKey},r.widgetKey="formInput",r}(r),i=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),o=function(e){function r(t,r){var n=e.call(this)||this;return n.parameter=t,n.dartTemp=r,n}return i(r,e),r.prototype.generate=function(){var e=this.getRawTemp(this.dartTemp),r=(e.outter,e.inner),n=this.generateControllerName(this.parameter),a={"{formElControllerName}":n,"{formElWidgetName}":this.generateWidgetName(this.parameter),"{fileBytes}":n+"Bytes","{fileName}":n,"{fileDesc}":this.parameter.description?this.parameter.description:this.parameter.name};return t.replaceKeyValueRegex(a,r)},r.prototype.getRawTempKey=function(){return r.widgetKey},r.widgetKey="formElFile",r}(r),s=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),l=function(e){function r(t,r){var n=e.call(this)||this;return n.parameter=t,n.dartTemp=r,n}return s(r,e),r.prototype.generate=function(){var e=this.getRawTemp(this.dartTemp).inner,r={"{formElControllerName}":this.generateControllerName(this.parameter),"{formElWidgetName}":this.generateWidgetName(this.parameter),"{formElCaption}":this.parameter.description?this.parameter.description:this.parameter.name,"{formElRequired}":this.parameter.required?"true":"false"};return t.replaceKeyValueRegex(r,e)},r.prototype.getRawTempKey=function(){return r.widgetKey},r.widgetKey="formElMultiFile",r}(r),p=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),u=function(e){function r(t,r){var n=e.call(this)||this;return n.parameter=t,n.dartTemp=r,n}return p(r,e),r.prototype.generate=function(){var e=this.getRawTemp(this.dartTemp),r=(e.outter,e.inner),n=this.generateControllerName(this.parameter),a={"{formElControllerName}":n,"{formElWidgetName}":this.generateWidgetName(this.parameter),"{formElCaption}":this.parameter.description?this.parameter.description:this.parameter.name,"{selectedIds}":n};return t.replaceKeyValueRegex(a,r)},r.prototype.getRawTempKey=function(){return r.widgetKey},r.widgetKey="formElSelect",r}(r),d=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.getRawTempKey=function(){return t.widgetKey},t.widgetKey="formElMultiSelect",t}(u),h=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),m=function(e){function r(t,r){var n=e.call(this)||this;return n.parameter=t,n.dartTemp=r,n}return h(r,e),r.prototype.generate=function(){var e=this.getRawTemp(this.dartTemp),r=(e.outter,e.inner),n={"{formElControllerName}":this.generateControllerName(this.parameter),"{formElWidgetName}":this.generateWidgetName(this.parameter),"{hintText}":this.parameter.description?this.parameter.description:this.parameter.name};return t.replaceKeyValueRegex(n,r)},r.prototype.getRawTempKey=function(){return r.widgetKey},r.widgetKey="formDate",r}(r),f=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return f(t,e),t.prototype.getRawTempKey=function(){return t.widgetKey},t.widgetKey="formDatetime",t}(m),y=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),v=function(e){function r(t,r){var n=e.call(this)||this;return n.parameter=t,n.dartTemp=r,n}return y(r,e),r.prototype.generate=function(){var e=this.getRawTemp(this.dartTemp),r=(e.outter,e.inner),n={"{formElControllerName}":this.generateControllerName(this.parameter),"{formElWidgetName}":this.generateWidgetName(this.parameter),"{formElCaption}":this.parameter.description?this.parameter.description:this.parameter.name,"{initialText}":""};return t.replaceKeyValueRegex(n,r)},r.prototype.getRawTempKey=function(){return r.widgetKey},r.widgetKey="formRichtext",r}(r),w=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),T=function(e){function r(t,r){var n=e.call(this)||this;return n.parameter=t,n.dartTemp=r,n}return w(r,e),r.prototype.generate=function(){var e=this.getRawTemp(this.dartTemp),r=(e.outter,e.inner),n={"{formElControllerName}":this.generateControllerName(this.parameter),"{formElWidgetName}":this.generateWidgetName(this.parameter),"{formElCaption}":this.parameter.description?this.parameter.description:this.parameter.name};return t.replaceKeyValueRegex(n,r)},r.prototype.getRawTempKey=function(){return r.widgetKey},r.widgetKey="formCheck",r}(r),C=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),b=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return C(t,e),t.prototype.getRawTempKey=function(){return t.widgetKey},t.widgetKey="formTextarea",t}(a),E=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),N=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return E(t,e),t.prototype.getRawTempKey=function(){return t.widgetKey},t.widgetKey="formTime",t}(m),S=function(){function e(e,t){this.parameter=e,this.dartTemp=t}return e.prototype.generateWidget=function(){return this.getWidget().generate()},e.prototype.getWidget=function(){switch(this.parameter.type){case"select":return this.generateSelect();case"multi_select":return this.generateMutiSelect();case"check":return this.generateCheck();case"richtext":return this.generateRichtext();case"date":return this.generateDate();case"datetime":return this.generateDatetime();case"time":return this.generateTime();case"file":return this.generateFile();case"multi_file":return this.generateMultiFile();case"textarea":return this.generateTextarea();default:return this.generateInput()}},e.prototype.generateInput=function(){return new a(this.parameter,this.dartTemp)},e.prototype.generateTextarea=function(){return new b(this.parameter,this.dartTemp)},e.prototype.generateFile=function(){return new o(this.parameter,this.dartTemp)},e.prototype.generateMultiFile=function(){return new l(this.parameter,this.dartTemp)},e.prototype.generateMutiSelect=function(){return new c(this.parameter,this.dartTemp)},e.prototype.generateSelect=function(){return new u(this.parameter,this.dartTemp)},e.prototype.generateDatetime=function(){return new g(this.parameter,this.dartTemp)},e.prototype.generateTime=function(){return new N(this.parameter,this.dartTemp)},e.prototype.generateDate=function(){return new m(this.parameter,this.dartTemp)},e.prototype.generateRichtext=function(){return new v(this.parameter,this.dartTemp)},e.prototype.generateCheck=function(){return new T(this.parameter,this.dartTemp)},e}(),x=function(){function e(e,t,r,n,a,i){var o;this.dart=e,this.parameters=t,this.inBodyParameters=r,this.method=n,this.consumes=a,this.path=i,this.consume=this.consumes&&this.consumes.length&&this.consumes[0],this.consume=null!==(o=this.consume)&&void 0!==o?o:"application/json"}return e.prototype.parse=function(){return this.prepareParameterType(),-1!=this.consume.indexOf("multipart")?this.postFile():this.postNormal(),this.dart},e.prototype.prepareParameterType=function(){for(var e=0;e<this.parameters.length;e++)this.parameters[e].type&&(this.parameters[e].type=this.parameters[e].type.split(":")[0])},e.prototype.postFile=function(){for(var e,r=this.parameters,n=[],a=[],i={},o=0;o<r.length;o++){var s=r[o].in;i[s]||(i[s]=[]),i[s].push(r[o])}e=this.addHeaders(i,!0);var l=i.formData;if(this.inBodyParameters&&(l=this.inBodyParameters),l)for(o=0;o<l.length;o++){var p=l[o].name;if("file"==l[o].type){var u="file"+t.strToMethod(t.generateControllerName(p))+"Bytes",d="file"+t.strToMethod(t.generateControllerName(p))+"Name";a.push("\n                        if("+u+" != null) {\n                            MediaType mimeType = Utils.getMime( "+d+"!);\n                            request.files.add(new http.MultipartFile.fromBytes('"+p+"', "+u+" as List<int>, filename:  "+d+" , contentType:mimeType ));\n                        }\n                        ")}else n.push("request.fields['"+p+"'] = "+this.getValue(p,"",l[o].dataType)+";")}this.dart=this.dart.replace("{buildRequest}",this.makeHttpRequestFile(a)),this.dart=this.dart.replace("{prepareDataForUpdate}",this.prepareDataForUpdate(n)),this.dart=this.dart.replace("{prepareHeaderForUpdate}",this.prepareHeaderForUpdate(e))},e.prototype.makeHttpRequestFile=function(e){return'\n        Uri  uri = Uri.parse(getSaveUrl()); \n        var request = new http.MultipartRequest("'+this.method+'", uri);\n        '+(e.length?e.join("\n"):"")+"\n        \n            request.send().then((response) async {\n                \n                if (response.statusCode == 200) {\n                \n                    String body = await response.stream.bytesToString();\n                    saveCallback(jsonDecode(body), response.statusCode);\n                    Navigator.pop(context);\n                    Utils.showSnackText(context, body);\n                } else {\n                    Navigator.pop(context);\n                    Utils.showSnackText(context, response.statusCode.toString());\n                }\n            }).catchError((onError) {\n                Navigator.pop(context);\n                \n                Utils.showSnackText(context, onError.message);\n            });\n        "},e.prototype.postNormal=function(){for(var e,t=this.parameters,r=[],n={},a=0;a<t.length;a++){var i=t[a].in;n[i]||(n[i]=[]),n[i].push(t[a])}e=this.addHeaders(n,!1);var o="get"==this.method?n.query:n.formData;if(this.inBodyParameters.length>0&&(o=this.inBodyParameters),o){var s={};for(r.push("var formDatas = <String, dynamic>{};"),a=0;a<o.length;a++){var l=o[a].name,p=o[a].groupName;p?(s[p]||(s[p]=[]),s[p].push('"'+l+'": '+this.getValue(l,p,o[a].dataType))):r.push("formDatas['"+o[a].name+"'] = "+this.getValue(l,"",o[a].dataType)+";")}for(var u in s)r.push("formDatas['"+u+"'] = {"+s[u].join(",")+"};")}this.dart=this.dart.replace("{buildRequest}",this.makeHttpRequest(e,r)),this.dart=this.dart.replace("{prepareDataForUpdate}",this.prepareDataForUpdate(r)),this.dart=this.dart.replace("{prepareHeaderForUpdate}",this.prepareHeaderForUpdate(e))},e.prototype.makeHttpRequest=function(e,t){var r="formDatas";this.inBodyParameters&&(r="json.encode(formDatas)");var n="\n           response = await http.{method}(\n                uri,\n                "+(e.length?"headers: headers,":"")+"\n                "+(t.length&&!["get","delete"].includes(this.method)?"body: "+r+",":"")+"\n            );",a="get"==this.method?n.replace("{method}","get").replace(" body: json.encode(formDatas),",""):"if (getMethod() == 'put') {\n                "+n.replace("{method}","put")+"\n            }\n            else {\n                "+n.replace("{method}","post")+"\n            }";return"        \n        Uri  uri = Uri.parse(getSaveUrl())"+("get"==this.method?".replace(queryParameters: formDatas)":"")+"; \n        http.Response ? response;\n       "+a+"\n        if(getMethod() == 'put' ) {\n          if(response.statusCode == 200)\n            Navigator.of(context).pop();\n        }\n        else {\n          Navigator.of(context).pop();\n        }\n        saveCallback(jsonDecode(response.body), response.statusCode);\n        \n        Utils.showSnackText(context, response.body);  \n        "},e.prototype.prepareDataForUpdate=function(e){var t="var formDatas = <String, dynamic>{};";return e.length&&(t=e.join("\n")),(t+="\n")+"return formDatas;"},e.prototype.prepareHeaderForUpdate=function(e){var t="var headers = <String, dynamic>{};";return e.length&&(t=e.join("\n")),(t+="\n")+"return headers;"},e.prototype.addHeaders=function(e,t){var r=[];if(r.push("var headers = <String, String>{};"),r.push("headers['Content-Type'] = '"+this.consume+";charset=utf-8';"),e.header){var n=e.header;r.push("const storage = FlutterSecureStorage();");for(var a=0;a<n.length;a++)r.push("String? "+n[a].name+"Str = await storage.read(key: '"+n[a].name+"');"),r.push((t?"request.":"")+"headers['"+n[a].name+"'] = "+n[a].name+"Str ?? '';")}return r},e.prototype.getValue=function(e,r,n){var a=n&&["integer","number"].includes(n);n||(n="string");var i=e;r&&(i+="_"+r);var o=this.getParamTypes()[i],s=t.generateControllerName(r?r+"_"+e:e),l=a?"Utils.strToInt("+s+") : 0":s+' : ""',p=s+" != null ? "+l;if("multi_file"==o)p=s;else if("multi_select"==o)p=s+" != null ? "+s+" : []";else if("select"==o){var u=s+"![0].toString()";p=s+" != null ? "+(l=a?"Utils.strToInt("+u+") : 0":u+' : ""')}else"richtext"==o?p="await "+s+".getText()":"input"==o?p=a?"Utils.strToInt("+s+".text)":s+".text":"textarea"==o?p=s+".text":"check"==o?p=s+" != null ? ("+s+"! ? true : false) : false":"file"==o&&(p=s+"Src != null ? "+s+'Src : ""');return p},e.prototype.getParamTypes=function(){for(var e={},t=this.inBodyParameters.length>0?this.inBodyParameters:this.parameters,r=0;r<t.length;r++){var n=t[r].name;t[r].groupName&&(n+="_"+t[r].groupName),e[n]=t[r].type}return e},e}(),_=function(){function e(e,t,r){this.dart=e,this.ppp=t,this.method=r}return e.prototype.parse=function(){for(var e=this.ppp?Object.keys(this.ppp):[],r=t.getRawWidgetTemp("prepareDataForSelect",this.dart),n=[],a=[],i=r.inner,o=[],s=0;s<e.length;s++){var l=e[s],p=this.ppp[l];if(-1!=p.indexOf("select")){var u="bodyTable";p.split(":").length>1?(u="bodyConfig",a.push(l)):n.push(l),o.push(this.assign(l,u))}}return o.length>0?(i=i.replace("{assign}",o.join("\n")),this.dart=this.dart.replace(r.outter,i),this.dart=t.replaceKeyValueRegex({"{configFields}":a.length>0?'"'+a.join('", "')+'"':"","{tableFields}":n.length>0?'"'+n.join('", "')+'"':""},this.dart)):"put"==this.method?(i=i.replace("{assign}",""),this.dart=this.dart.replace(r.outter,i),this.dart=t.replaceKeyValueRegex({"{configFields}":"","{tableFields}":""},this.dart)):this.dart=this.dart.replace(r.outter,"bool loadedSelectData = true;"),this.dart},e.prototype.assign=function(e,r){var n=[],a=t.generateControllerName(e);return n.push("list"+a+" = jsonArrayToList("+r+'["data"]["'+e+'"]);'),n.join("\n")},e}(),F=function(){function e(e,t,r,n,a){this.rawControllerWidgetTemp={},this.bodyParameters=[],this.groupNameTitles={},this.assignPutFormData=[],this.dartTemp=e,this.dart=this.dartTemp,this.data=n,this.path=t,this.method=r,this.parameters=n.parameters,this.definitions=a}return e.prototype.generate=function(){return this.generateMain(),this.process3pParams(),this.generateWidgets(),this.parseFormElementMethods(),this.prepareDataForSelect(),this.assignPutForm(),this.dart=new x(this.dart,this.parameters,this.bodyParameters,this.method,this.data.consumes,this.path).parse(),this.replaceBuild(),this.dart=this.dart.replace("{saveLabelText}",this.getSaveLabelText()),this.dart},e.prototype.generateMain=function(){var e={"{className}":"Base"+t.strToMethod(this.path+":"+this.method)+"Page","{routeName}":this.path,"{pageTitle}":this.data.summary,"{method}":this.method};this.dart=t.replaceKeyValueRegex(e,this.dart)},e.prototype.replaceBuild=function(){var e=t.getRawWidgetTemp("buildListTable",this.dart);if(this.dart=this.dart.replace(e.outter,""),"post"==this.method||this.method,["post","put"].includes(this.method))"post"==this.method?(r=t.getRawWidgetTemp("buildPostForm",this.dart),this.dart=this.dart.replace(r.outter,r.inner),r=t.getRawWidgetTemp("buildPutForm",this.dart),this.dart=this.dart.replace(r.outter,"")):(r=t.getRawWidgetTemp("buildPutForm",this.dart),this.dart=this.dart.replace(r.outter,r.inner),r=t.getRawWidgetTemp("buildPostForm",this.dart),this.dart=this.dart.replace(r.outter,""));else{var r=t.getRawWidgetTemp("buildPostForm",this.dart);this.dart=this.dart.replace(r.outter,""),r=t.getRawWidgetTemp("buildPutForm",this.dart),this.dart=this.dart.replace(r.outter,"")}},e.prototype.generateWidgets=function(){for(var e=this.parameters,t=0;t<e.length;t++){var r=e[t].in,n=e[t].name;if("body"==r&&"body"==n){this.processBodyInBody(e[t].schema),(e=e.concat(this.bodyParameters)).splice(t,1);break}}var a={};for(t=0;t<e.length;t++){r=e[t].in;var i=e[t].name;if("header"!=r&&"path"!=r&&("body"!=i||"body"!=r)){if(this.ppp)if(Object.keys(this.ppp).includes(i))e[t].type=this.ppp[i].split(":")[0];else for(var o in this.ppp)if(-1!=o.indexOf(".")){var s=o.split(".");if(s.length>1){var l=s[1],p=s[0];if(i==l&&e[t].groupName==p){e[t].type=this.ppp[o].split(":")[0];break}}}else e[t].type="input";else"file"!=e[t].type&&(e[t].type="input");var u=e[t].type;a[u]||(a[u]=[]),a[u].push(this.generateWidget(e[t],u))}}for(var d in a)this.dart=this.dart.replace(this.rawControllerWidgetTemp[d].outter,a[d].join("\n"));this.clearUnUseWidget()},e.prototype.isTest=function(){return"put"==this.method&&"/owner-contracts/{id}"==this.path},e.prototype.processBodyInBody=function(e){if(e.allOf)for(var t=e.allOf,r=0;r<t.length;r++)t[r].$ref?this.processDefinition(t[r].$ref):t[r].required&&(this.requiredParams=t[r].required);else e.$ref&&this.processDefinition(e.$ref);for(r=0;r<this.bodyParameters.length;r++)this.requiredParams&&this.requiredParams.includes(this.bodyParameters[r].name)&&(this.bodyParameters[r].required=!0)},e.prototype.processDefinition=function(e,t){e=e.replace("#/definitions/","");var r=this.definitions[e],n=r.allOf;if(n){for(var a=0;a<n.length;a++)if(n[a].$ref){var i=n[a].$ref;this.processDefinition(i)}else if(r.properties){var o=r.properties;for(var s in o)this.bodyParameters.push({name:s,in:"body",groupName:t,type:o[s].type,dataType:o[s].type,description:o[s].description})}}else if(r.properties)for(var s in o=r.properties)if(o[s].$ref)i=o[s].$ref,this.processDefinition(i,s),this.groupNameTitles[s]=o[s].description?o[s].description:s;else if(o[s].properties){var l=o[s].properties;for(var p in this.groupNameTitles[s]=o[s].description?o[s].description:s,l)this.bodyParameters.push({name:p,in:"body",groupName:s,type:l[p].type,dataType:l[p].type,description:l[p].description})}else this.bodyParameters.push({name:s,in:"body",groupName:t,type:o[s].type,dataType:o[s].type,description:o[s].description})},e.prototype.clearUnUseWidget=function(){for(var e=[a.widgetKey,u.widgetKey,c.widgetKey,m.widgetKey,g.widgetKey,T.widgetKey,v.widgetKey,o.widgetKey,l.widgetKey,b.widgetKey,N.widgetKey],r=0;r<e.length;r++){var n=t.getRawWidgetTemp(e[r],this.dart);n&&(this.dart=this.dart.replace(n.outter,""))}},e.prototype.process3pParams=function(){var e=this.parameters,t=[];for(var r in e){var n=e[r];if("3p"==n.name)for(var a in this.ppp=n.default,this.ppp)this.ppp[a]="richtext"==this.ppp[a]?"textarea":this.ppp[a],this.ppp[a]="image"==this.ppp[a]?"file":this.ppp[a];else t.push(n)}this.parameters=t},e.prototype.generateWidget=function(e,t){var r=new S(e,this.dartTemp);return this.rawControllerWidgetTemp[t]=r.getWidget().getRawTemp(this.dart),r.generateWidget()},e.prototype.parseFormElementMethods=function(){for(var e=0,r=this.bodyParameters.length>0?this.bodyParameters:this.parameters,n=[],a={},i="",o=0;o<r.length;o++)if(!["header","path"].includes(r[o].in)){var s=r[o].groupName,l=r[o].name;if(this.assignDataForPutForm(r[o]),s&&(l=s+"_"+l),s)i!=s&&(n.push("group:"+s),i=s,a[s]=[]),a[s].push("gen"+t.strToMethod(l)+"Widget()");else if("get"==this.method){var p="true";this.getInvisibleFormFields().includes(l)&&(p="false",e++),n.push("Visibility( child: SizedBox( width: 240, child: gen"+t.strToMethod(l)+"Widget()), visible: "+p+")")}else n.push("gen"+t.strToMethod(l)+"Widget()")}if(a)for(o=0;o<n.length;o++)if("group:"==n[o].substring(0,"group:".length)){var u=n[o].split(":")[1];n[o]="\n      TitledContainer(\n        titleText: '{title}',\n        child: Column(\n          children: [{list}]))\n      ".replace("{list}",a[u].join(",")),n[o]=n[o].replace("{title}",this.groupNameTitles[u])}this.dart=this.dart.replace("{invisibleSearchFormField}",e+""),this.dart=this.dart.replace("{formElementMethods}",n.join(", "))},e.prototype.getInvisibleFormFields=function(){return[]},e.prototype.prepareDataForSelect=function(){this.dart=new _(this.dart,this.ppp,this.method).parse()},e.prototype.assignPutForm=function(){this.dart=this.dart.replace("{assignDataForPutForm}",this.assignPutFormData?this.assignPutFormData.join("\n"):"")},e.prototype.assignDataForPutForm=function(e){if("put"==this.method){var t=e.name,r=e.groupName;this.assignPutFormData.push(this.setValue(e).replace(/{value}/g,'json["data"]'+(r?'["'+r+'"]':"")+'["'+t+'"]'))}},e.prototype.setValue=function(e){var r=e.name,n=e.groupName,a=e.dataType,i=e.type,o=a&&["integer","number"].includes(a);a||(a="string");var s=t.generateControllerName(n?n+"_"+r:r),l=o?s+" = Utils.strToInt({value})":s+" = {value}";return["multi_select","select"].includes(i)?l=s+" = "+("multi_select"==i?"{value}":"{value} != null ? [{value}] : {value}"):"richtext"==i?l=s+".setText({value})":"input"==i||"textarea"==i?l=s+".text = "+(o?"Utils.formatNumberText({value})":"Utils.strNullToEmpty({value}.toString())"):"check"==i?l=s+" = {value}":"file"==i&&(l="assign"+s+"ForPutForm({value})"),l+";"},e.prototype.getSaveLabelText=function(){return"Save"},e}(),W=function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),P=function(e){function r(){var t=null!==e&&e.apply(this,arguments)||this;return t.columns=[],t.inQueryColSpecs=null,t.colsHasSearch=[],t}return W(r,e),r.prototype.replaceBuild=function(){var e=t.getRawWidgetTemp("buildPostForm",this.dart);this.dart=this.dart.replace(e.outter,""),e=t.getRawWidgetTemp("buildPutForm",this.dart),this.dart=this.dart.replace(e.outter,""),e=t.getRawWidgetTemp("buildListTable",this.dart),this.dart=this.dart.replace(e.outter,e.inner)},r.prototype.generateMain=function(){e.prototype.generateMain.call(this),this.assignColumnNames();var r={"{genColList}":this.columns.length>0?"{"+this.columns.join(",")+"}":"{}","{path}":this.path};this.dart=t.replaceKeyValueRegex(r,this.dart)},r.prototype.assignColumnNames=function(){var e=this;try{var r=this.getResponseProps();Object.keys(r).forEach((function(n,a){var i=r[n].description,o="",s=t.strToMethod(n),l=t.generateControllerName(n);e.getColumnsHasSearch().includes(n)&&(o=",searchWidget: gen"+s+"Widget(),\n          searchController: "+l);var p="",u=e.getInQueryColSpecs();u[n]&&(p=', colType: "'+u[n]+'"'),e.columns.push("'"+n+"': ColSpecs(name: '"+(i||n)+"'"+("id"==n?",width: 100, alignment: Alignment.center":"")+p+o+")")}))}catch(e){console.error(e)}},r.prototype.getInQueryColSpecs=function(){if(!this.inQueryColSpecs&&(this.inQueryColSpecs={},this.parameters))for(var e=0;e<this.parameters.length;e++)"3p"==this.parameters[e].name&&(this.inQueryColSpecs=this.parameters[e].default);return this.inQueryColSpecs},r.prototype.getColumnsHasSearch=function(){if(0==this.colsHasSearch.length&&this.parameters)for(var e=0;e<this.parameters.length;e++)"query"==this.parameters[e].in&&this.colsHasSearch.push(this.parameters[e]);return this.colsHasSearch.length>0?this.colsHasSearch.map((function(e){return e.name})):[]},r.prototype.getInvisibleFormFields=function(){return Object.keys(this.getResponseProps())},r.prototype.getResponseProps=function(){if(!this.data.responses[200].schema)return{};var e=this.data.responses[200].schema.items,t={};if(e)if(e.properties)t=e.properties;else if(e.$ref){var r=e.$ref.replace("#/definitions/","");t=this.definitions[r].properties}return t},r.prototype.getSaveLabelText=function(){return"Search"},r}(F),D=new(function(){function e(){this.flutterWidgets=[],this.baseFilename="package:backend_flutter/backend_generator/base_backend.dart"}return e.prototype.init=function(e){return t=this,r=void 0,a=function(){var t;return function(e,t){var r,n,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(o=0)),o;)try{if(r=1,n&&(a=2&s[0]?n.return:s[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,s[1])).done)return a;switch(n=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],n=0}finally{r=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(r){switch(r.label){case 0:return this.swaggerJsonUrl=e,[4,fetch(e)];case 1:return[4,r.sent().json()];case 2:return t=r.sent(),this.swaggerJson=t,this.dartTemp="\nclass {className} extends StatefulWidget {\n    static const String routeName = '{routeName}';\n    const {className}({Key? key}) : super(key: key);\n    @override\n    State<{className}> createState() => {className}State();\n}\n\nclass {className}State extends State<{className}> {\n    final _formKey = GlobalKey<FormState>();\n    String getMethod() {\n        return '{method}';\n    }\n    {buildPostForm} \n    @override\n    Widget build(BuildContext context) {\n        return Layout(\n            title: '{pageTitle}',\n            page: SingleChildScrollView(\n                child: Row(children: [\n                colLeftRight(),\n                Expanded(flex: 3, child:  genForm() ),\n                colLeftRight(),\n            ])));\n    }\n    Widget colLeftRight() {\n        return Expanded(\n            flex: Utils.isSmallScreen(context) ? 0 : 1,\n            child: const SizedBox(),\n        );\n    }\n    \n    {/buildPostForm}\n\n    {buildPutForm} \n    \n    @override\n    Widget build(BuildContext context) { \n        if(getMethod() == 'put') { \n            return FutureBuilder<dynamic>(\n                future: assignDataForPutForm(),\n                builder: (context, snapshot) {\n                if (snapshot.hasError) {\n                    print(snapshot.error);\n                    return Text('There was an error :(');\n                } else if (snapshot.hasData) {\n                    return genForm();\n                } else {\n                    return Column(children: [SizedBox(child: CircularProgressIndicator(), width: 50, height: 50)]);\n                }\n            });\n        } \n        return Layout(\n            title: '{pageTitle}',\n            page:   SingleChildScrollView(\n                    child: Row(children: [\n                    colLeftRight(),\n                    Expanded(flex: 5, child: genForm()),\n                    colLeftRight(),\n                ]))\n            ); \n    }\n\n    Widget colLeftRight() {\n        return Expanded(\n            flex: Utils.isSmallScreen(context) ? 0 : 1,\n            child: const SizedBox(),\n        );\n    }\n    void save () async {\n        Template.showLoading(context);\n        var formDatas = prepareDataForUpdate();\n        var headers = prepareHeaderForUpdate();\n        {buildRequest} \n    }\n    Widget genForm() {\n        List<Widget> elements = [];\n        elements.addAll(formElements());\n        elements.add(formButton());\n\n        return Form(\n            key: _formKey,\n            child: Padding(\n                padding: const EdgeInsets.all(16),\n                child:  Column(\n                    crossAxisAlignment: CrossAxisAlignment.start, \n                    children: elements\n                )\n                 \n            )\n        );\n    }\n    \n    Widget formButton() {\n        return Center(\n            child: EButton(\n                text: \"{saveLabelText}\",\n                onPress: () {\n                    if (_formKey.currentState!.validate()) {\n                        save(); \n                    }\n                }\n            )\n        );\n    }\n\n    {/buildPutForm}\n    \n    {buildListTable}\n    @override\n    Widget build(BuildContext context) {\n        return Layout(\n            title: '{pageTitle}',\n            hasSearch: formElements().isNotEmpty && invisibleSearchFormField != formElements().length,\n            searchForm:  genForm(),\n            exportWidget: exportWidget(),\n            hasCreateButton: true,\n            createRouteName: getCreatePageRouteName(),\n            page:  getTableGrid()\n        );\n    }  \n    exportWidget() {\n        return null;\n    }\n\n    \n    Widget getTableGrid() {\n        return loadedSelectData\n        ? TableGrid(\n            listCol: getListCol(),\n            listUrl: '$apiBasePath{path}',\n            deleteUrl: '$apiBasePath{path}',\n            onDelete: (id) {\n                Utils.showSnackText(context, 'Deleted id $id');\n            },\n            onEdit: (id) {\n                onEditRow(id);\n            },\n            queryParameters: prepareDataForUpdate(),\n            refesh: () => refresh()\n            \n        )\n        : SizedBox();\n    }\n    \n\n    Map<String, ColSpecs> getListCol() {\n        return {genColList};\n    }\n    void onEditRow(dynamic id) {}\n   \n    refresh() {\n         \n        setState(() {});\n    } \n    String ? getCreatePageRouteName() {\n        return null;\n    }\n\n    void save () async {\n        refresh();\n    }\n\n    Widget genForm() {\n        List<Widget> elements = [];\n        elements.addAll(formElements()); \n        return Form(key: _formKey, child: Row(children: elements));\n    }\n    \n    Widget formButton() {\n        return SizedBox(\n            width: 120,\n            child: EButton(\n                icon: const Icon(Icons.search),\n                text: \"Search\",\n                onPress: () {\n                    if (_formKey.currentState!.validate()) {\n                    save();\n                    }\n                }));\n    }\n    {/buildListTable}\n\n   \n    {prepareDataForSelect} \n    bool loadedSelectData = false;\n    @override\n    void initState() {\n        super.initState();  \n        Future process = prepareDataForSelect();\n         \n        Utils.callbackAffterBuilded(() {\n            process.then(\n                (value) {\n                    loadedSelectData = true; \n                    setState(() {}); \n                },\n            );\n           \n        });\n    }\n\n    Map<String, dynamic>? jsonFormData;\n    Future assignDataForPutForm() async {\n       \n        if (jsonFormData != null) {\n            return jsonFormData;\n          }\n        String token = await Utils.getToken();\n        String res = await Utils.httpGet(\n        url: getSaveUrl(),\n            headers: {\"token\": token},\n        );\n        Map<String, dynamic> json = jsonDecode(res);\n        {assignDataForPutForm}\n        jsonFormData = json;\n        return json;\n    }\n\n    late Map<String, dynamic> bodyConfig;\n    late Map<String, dynamic> bodyTable;\n\n    Future prepareDataForSelect () async {\n        try {\n            String token = await Utils.getToken();\n \n            List configFields = [{configFields}];//[\"phone\", \"email\"];\n            List tableFields = [{tableFields}];\n            if (configFields.length > 0) {\n                String resConfigData = await Utils.httpGet(\n                    url: apiSystemConfigPath,\n                    headers: {\"token\": token},\n                    params: {\"fields\": configFields.join(\",\")});\n                bodyConfig = jsonDecode(resConfigData);\n            }\n            if(tableFields.length > 0) {\n                String resTableData = await Utils.httpGet(\n                url: apiTableDataPath,\n                headers: {\"token\": token},\n                params: {\"fields\": tableFields.join(\",\")});\n                bodyTable = jsonDecode(resTableData);\n            }\n            {assign}\n        } catch (e) {}\n    }\n    \n    List<ButtonSelectDialogItem> jsonArrayToList(jas) {\n        List<ButtonSelectDialogItem> list = [];\n\n        if (jas != null) {\n            for (int i = 0; i < jas.length; i++) {\n                if (jas[i]['disabled'] != true)\n                    list.add(ButtonSelectDialogItem(\n                        id:  jas[i]['id'] != null ? jas[i]['id'] : jas[i]['code'] , \n                        name: jas[i]['name'] != null ? jas[i]['name'] : (jas[i]['fullname'] ?? jas[i]['username'] ?? ''),\n                        data: jas[i],\n                    ));\n            }\n        }\n        return list;\n    }\n    {/prepareDataForSelect}\n  \n    prepareDataForUpdate()  {\n        {prepareDataForUpdate} \n    }\n\n    prepareHeaderForUpdate() {\n        {prepareHeaderForUpdate} \n    }\n    \n    saveCallback(body, statusCode) {}\n\n    String getSaveUrl() {\n        return '$apiBasePath{routeName}';\n    }\n\n    int invisibleSearchFormField = {invisibleSearchFormField};\n    List<Widget> formElements() {\n        return [{formElementMethods}];\n    }\n\n    \n    {formInput}\n    final TextEditingController {formElControllerName} = TextEditingController();\n    String {formElControllerName}Value = '';\n    \n    Widget {formElWidgetName}() {\n        return Template.genTextFormFieldWidget(\n            controller: {formElControllerName},\n            label: '{formElCaption}',\n            onChange:  () => onWidgetChange(widgetMethod: '{formElWidgetName}', widgetController: {formElControllerName}),\n            onClear:  () => onWidgetChange(delay: false),\n            {formElNumberOnly}\n            keyboardType: TextInputType.number,\n            {/formElNumberOnly}\n            {formElValidator}\n            validator: (value) {\n                if (value == null || value.isEmpty) {\n                    return '{formElCaption} không được bỏ trống';\n                }\n                return null;\n            }\n            {/formElValidator}\n        );\n    }\n\n    {/formInput}\n    \n    Timer? debounce;\n    onWidgetChange({delay = true, String widgetMethod = '', widgetController}) {\n        if (getMethod() == 'get') {\n          if (!delay) {\n            save();\n          } else {\n            if (debounce?.isActive ?? false) debounce!.cancel();\n            debounce = Timer(const Duration(milliseconds: 500), () {\n              save();\n            });\n          }\n        } else {\n          setState(() {});\n        }\n    }    \n\n\n    {formTextarea}\n    final TextEditingController {formElControllerName} = TextEditingController();\n    Widget {formElWidgetName}() {\n        return Template.genTextFormFieldWidget(\n            controller: {formElControllerName},\n            maxLines: 3,\n            label: '{formElCaption}',\n            onChange:  () => onWidgetChange(widgetMethod: '{formElWidgetName}', widgetController: {formElControllerName}),\n            onClear:  () => onWidgetChange(delay: false),\n            {formElNumberOnly}\n            keyboardType: TextInputType.number,\n            {/formElNumberOnly}\n            {formElValidator}\n            validator: (value) {\n                if (value == null || value.isEmpty) {\n                    return '{formElCaption} không được bỏ trống';\n                }\n                return null;\n            }\n            {/formElValidator}\n        );\n    }\n    {/formTextarea}\n\n    {formCheck}\n    bool ? {formElControllerName};\n    Widget {formElWidgetName}() {\n        return Padding(\n            padding: getWidgetPadding(),\n            child: CheckWidget(\n                text: '{formElCaption}',\n                checked: {formElControllerName},\n                onChange: (val) {\n                    {formElControllerName}Change(val);\n                },\n            )\n        );\n    }\n\n    {formElControllerName}Change(bool ? val) {\n        {formElControllerName} = val;\n    }\n\n    {/formCheck}\n\n    {formDate}\n    String ?   {formElControllerName};\n    Widget {formElWidgetName}() {\n        return Padding(\n            padding: getWidgetPadding(),\n            child: DateWidget(\n                hintText: '{hintText}',\n                withTime: false,\n                initValue: {formElControllerName},\n                onChange: (value) {\n                    {formElControllerName}Change(value); \n                    if (getMethod() == 'get') {\n                        save();\n                    } \n                },\n              )\n        );\n    }\n\n    {formElControllerName}Change(String ? value) {\n        {formElControllerName} = value;\n        print(value);\n    }\n    {/formDate}\n\n    {formDatetime}\n    String ?   {formElControllerName};\n    Widget {formElWidgetName}() {\n        return Padding(\n            padding: getWidgetPadding(),\n            child: DateWidget(\n                hintText: '{hintText}',\n                withTime: true,\n                initValue: {formElControllerName},\n                onChange: (value) {\n                    {formElControllerName}Change(value);\n                    if (getMethod() == 'get') {\n                        save();\n                    } \n                },\n              )\n        );\n    }\n    {formElControllerName}Change(String ? value) {\n        {formElControllerName} = value;\n        print(value);\n    }\n    {/formDatetime}\n\n    {formTime}\n    String ?   {formElControllerName};\n    Widget {formElWidgetName}() {\n        return Padding(\n            padding: getWidgetPadding(),\n            child: TimeWidget(\n                hintText: '{hintText}', \n                initValue: {formElControllerName},\n                onChange: (value) {\n                    {formElControllerName}Change(value);\n                    if (getMethod() == 'get') {\n                        save();\n                    } \n                },\n              )\n        );\n    }\n    {formElControllerName}Change(String ? value) {\n        {formElControllerName} = value;\n        print(value);\n    }\n    {/formTime}\n\n    {formRichtext}\n    final HtmlEditorController {formElControllerName} = HtmlEditorController();\n    Widget {formElWidgetName}() {\n        return Padding(\n            padding: getWidgetPadding(),\n            child: Container(\n            decoration: BoxDecoration(\n                border: Border.all(\n                width: 1,\n                color: borderColor,\n                ),\n                borderRadius: BorderRadius.circular(5),\n            ),\n            child: HtmlEditor(\n                controller: {formElControllerName},\n                htmlEditorOptions: const HtmlEditorOptions(\n                    hint: 'Nhập {formElCaption} ...',\n                    shouldEnsureVisible: true,\n                    initialText: \"{initialText}\",\n                ),\n                otherOptions:\n                    OtherOptions(height: 250),\n            ),\n            ));\n    }\n    {/formRichtext}\n\n    \n    {formElFile}\n    String ? {fileName};\n    String ? {fileName}Src;\n    Key {fileName}Key = Key('{fileName}');\n    Widget {formElWidgetName}() {\n        return Padding(\n            padding: getWidgetPadding(),\n            child: ImageUploadFile(\n                key: {fileName}Key,\n                label: '{fileDesc}',\n                initialValue: {fileName}Src,\n                onChange: (src) => {fileName}Src = src.toString().replaceAll('undefined', '')\n            ),\n        );\n    }\n    \n    assign{fileName}ForPutForm(dynamic val) {\n        if(val != null) {\n            {fileName}Src = val;\n            {fileName} = val.toString().split(\"/\").last;\n        }\n        else {\n            {fileName}Src = null;\n            {fileName} = null;\n        }\n    }\n    {/formElFile} \n\n    {formElMultiFile}\n    List<dynamic> ? {formElControllerName};\n    Widget {formElWidgetName}() {\n        return MultipleUpload(\n            initialValue: {formElControllerName} != null\n            ? ({formElControllerName} as List)\n                .map((item) => item as String)\n                .toList()\n            : null,\n            label: '{formElCaption}',\n            required: {formElRequired},\n            onChange: (srcs) {\n                {formElControllerName} = srcs;\n            },\n        );\n    } \n    {/formElMultiFile} \n \n    {formElSelect}\n    List<dynamic> ? {formElControllerName};\n    List<ButtonSelectDialogItem>  ? list{formElControllerName};\n    Widget {formElWidgetName}() {\n            \n        return Padding(\n            padding: getWidgetPadding(),\n            child: ButtonSelectDialog(\n            multiple: false,\n            hintText: '{formElCaption}',\n            dialogTitle: '{formElCaption}',\n            selectedIds: {selectedIds},\n            data: list{formElControllerName} != null ? list{formElControllerName}! : [],\n            onChange: (List<dynamic>? selectedIds) {\n                {formElControllerName}Change(selectedIds);\n                if (getMethod() == 'get') {\n                    save();\n                } \n            },\n        )); \n    }\n    {formElControllerName}Change(List<dynamic>? selectedIds) {\n        this.{formElControllerName} = selectedIds;\n        print(selectedIds.toString());\n    }\n    {/formElSelect}\n\n    {formElMultiSelect}\n    List<dynamic> ? {formElControllerName};\n    List<ButtonSelectDialogItem>  ? list{formElControllerName};\n    Widget {formElWidgetName}() {\n            \n        return Padding(\n            padding: getWidgetPadding(),\n            child: ButtonSelectDialog(\n            multiple: true,\n            hintText: '{formElCaption}',\n            dialogTitle: 'Danh sách {formElCaption}',\n            selectedIds: {selectedIds},\n            data: list{formElControllerName} != null ? list{formElControllerName}! : [],\n            onChange: (List<dynamic>? selectedIds) {\n                {formElControllerName}Change(selectedIds);\n                if (getMethod() == 'get') {\n                    save();\n                } \n            },\n        )); \n    }\n    \n    {formElControllerName}Change(List<dynamic>? selectedIds) {\n        this.{formElControllerName} = selectedIds;\n        print(selectedIds.toString());\n    }\n\n    {/formElMultiSelect} \n\n    getWidgetPadding() {\n        return const EdgeInsets.all(10);\n    }\n}",[2]}}))},new((n=void 0)||(n=Promise))((function(e,i){function o(e){try{l(a.next(e))}catch(e){i(e)}}function s(e){try{l(a.throw(e))}catch(e){i(e)}}function l(t){var r;t.done?e(t.value):(r=t.value,r instanceof n?r:new n((function(e){e(r)}))).then(o,s)}l((a=a.apply(t,r||[])).next())}));var t,r,n,a},e.prototype.execute=function(){var e=this.swaggerJson.paths;for(var t in this.flutterWidgets.push("<p>"+this.baseFilename+"</p>"),this.flutterWidgets.push("<textarea>"),this.flutterWidgets.push("import 'dart:convert';\nimport 'dart:async';\nimport 'package:flutter/material.dart';\nimport 'package:backend_flutter/views/layout/layout.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:backend_flutter/utils/Template.dart';\nimport 'package:backend_flutter/views/widgets/EButton.dart';\nimport 'package:backend_flutter/utils/Utils.dart';\nimport 'package:backend_flutter/consts/consts.dart';\nimport 'package:backend_flutter/views/widgets/ButtonSelectDialog.dart';\nimport 'package:backend_flutter/views/widgets/Check.dart';\nimport 'package:backend_flutter/views/widgets/TitleContainer.dart';\nimport 'package:backend_flutter/views/widgets/Time.dart';\nimport 'package:backend_flutter/views/widgets/Date.dart';\nimport 'package:backend_flutter/views/widgets/ImageUploadFile.dart';\nimport '../views/widgets/TableGrid.dart';\nimport '../views/widgets/MultipleUpload.dart';\n"),e){var r=e[t];for(var n in r)this.addBaseClass(t,n,r)}this.flutterWidgets.push("</textarea>")},e.prototype.addBaseClass=function(e,t,r){var n=r[t];this.generateDartCode(e,t,n)},e.prototype.generateDartCode=function(e,t,r){if("delete"!=t.toLowerCase())if("get"==t){var n=new P(this.dartTemp,e,t,r,this.swaggerJson.definitions);this.flutterWidgets.push(n.generate())}else"put"==t&&(n=new F(this.dartTemp,e,t,r,this.swaggerJson.definitions),this.flutterWidgets.push(n.generate()))},e.prototype.getFlutterWidgets=function(){return this.flutterWidgets},e}());D.init("http://localhost:8800/api-docs").then((function(e){D.execute(),document.getElementById("flutter_widget").innerHTML=D.getFlutterWidgets().join("\n")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,